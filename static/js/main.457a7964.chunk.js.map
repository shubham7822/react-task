{"version":3,"sources":["logo.svg","Components/Navbar/SearchBar/SearchBar.js","Components/Navbar/Navbar.js","Components/Navbar/Tasks/Task.js","Store/Actions.js","App.js","reportWebVitals.js","Store/TaskReducer.js","index.js"],"names":["SearchBar","id","type","Navbar","className","color","Avatar","getRandomColor","name","size","connect","state","Tasks","dispatch","AddTask","inputValues","payload","DeleteTask","DeletingTask","props","InitialValues","uuid","Description","Date","Time","User","useState","values","setValues","open","setOpen","is_editable","set_is_editable","editableValues","setEditableValues","handleInputChange","e","target","value","length","onClick","htmlFor","defaultValue","onChange","is_Arr_Empty","Object","filter","item","console","log","check_is_Empty","alert","map","handleEdit","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","initialState","store","createStore","action","newState","composeWithDevTools","applyMiddleware","logger","thunk","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.457a7964.chunk.js","sourcesContent":["export default __webpack_public_path__ + \"static/media/logo.6ce24c58.svg\";","import React from 'react'\r\nimport { BiSearchAlt} from \"react-icons/bi\";\r\nimport \"./SearchBar.css\"\r\nfunction SearchBar() {\r\n    return (\r\n        <div id=\"SearchBar\">\r\n            <input type=\"search\"></input>\r\n            <BiSearchAlt id=\"SearchIcon\"/>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default SearchBar\r\n","import React from 'react'\r\nimport Avatar from 'react-avatar';\r\nimport \"./Navbar.css\"\r\nimport SearchBar from './SearchBar/SearchBar';\r\n\r\n\r\nexport const Navbar = () => {\r\n    return (\r\n        <div className=\"Navbar\">\r\n            <div id=\"Navbar__Status\">\r\n            <p>Hi User</p>\r\n            <Avatar color={Avatar.getRandomColor('sitebase', ['red', 'green', 'blue'])} name=\"User\" size=\"50\" />\r\n            <SearchBar/>\r\n           </div>\r\n\r\n\r\n        </div>\r\n    )\r\n}\r\n\r\n\r\nexport default Navbar;\r\n","import React, { useState } from 'react'\r\nimport { connect } from 'react-redux'\r\nimport { BsPlus } from \"react-icons/bs\";\r\nimport {AddingTask, DeletingTask} from \"../../../Store/Actions\"\r\nimport \"./Tasks.css\"\r\nimport { RiDeleteBinLine } from \"react-icons/ri\";\r\nimport uuid from \"react-uuid\"\r\nimport Avatar from 'react-avatar';\r\nimport { BiEditAlt } from \"react-icons/bi\";\r\nconst Task = (props) =>{\r\n\r\n    const InitialValues = {\r\n        id:uuid(),\r\n        Description:\"\",\r\n        Date:\"\",\r\n        Time:\"\",\r\n        User:\"\"\r\n    }\r\n    const[values,setValues] = useState(InitialValues)\r\n    const[open,setOpen] = useState(false)\r\n    const[is_editable,set_is_editable] =useState(false)\r\n    const[editableValues,setEditableValues] = useState(\"\")\r\n    const handleInputChange =(e) => {\r\n        setValues(()=>({\r\n          ...values,\r\n          [e.target.name]:e.target.value\r\n        }))\r\n    }\r\n\r\n    const TaskOpen =() => {\r\n        setOpen((open) =>!open)\r\n        set_is_editable((is_editable) =>!is_editable)\r\n    }\r\n    const handleClose = () => {\r\n        \r\n        setOpen((open) => !open)\r\n                                \r\n    }\r\n\r\n    const check_is_Empty = () => {       \r\n        const is_Arr_Empty = Object.values(values).filter(item => item!==\"\")\r\n        console.log(is_Arr_Empty)       \r\n        if(is_Arr_Empty.length === 5){\r\n            return true\r\n        }else if(is_Arr_Empty.length === 1){\r\n            return false\r\n        }\r\n        return false\r\n    }\r\n\r\n\r\n    const handleSubmit =(e) => {\r\n            if(check_is_Empty()){\r\n            props.AddTask(values)\r\n            setOpen((open) => !open)\r\n            set_is_editable((is_editable) =>!is_editable)\r\n            }else{\r\n                alert(\"enter all the required feilds\")\r\n            }\r\n        }  \r\n        \r\n    \r\n    const handleDelete = () => {\r\n             props.DeleteTask(editableValues.id)              \r\n            setOpen((open) => !open)\r\n            }\r\n    const handleEdit = (item) => {\r\n        setOpen(true)\r\n        set_is_editable(true)        \r\n        setEditableValues(() => item)\r\n    \r\n    };\r\n        \r\n       \r\n    \r\n    return (\r\n            <div className=\"Tasks\">\r\n                   <span>\r\n                       Tasks { props.Tasks?.length}\r\n                       <BsPlus onClick={TaskOpen} className=\"Task__Add\"/>\r\n                   </span>\r\n                 {open ? \r\n                            (\r\n                 <div className={open ? \"Task__Form\" : \"Task__FromClose\"}>\r\n                         <label htmlFor=\"description\">Task Description</label>\r\n                     <input className=\"Task__Input\" name=\"Description\" defaultValue={ is_editable ? editableValues.Description : \"undefined\"}  onChange ={handleInputChange}type=\"text\"></input>\r\n                        <div className=\"TimeZones\">\r\n                             <div>\r\n                                 <label htmlFor=\"Date\">Date</label>\r\n                                 <input id=\"Task__Input__TimeZone\" name=\"Date\" defaultValue={ is_editable ? editableValues.Date : \"undefined\" } onChange ={handleInputChange} type=\"Date\"></input>\r\n                             </div>\r\n                             <div>\r\n                                <label htmlFor=\"description\">Time</label>\r\n                            <input className=\"Task__Input__TimeZone\" name=\"Time\" defaultValue={ is_editable ? editableValues.Time :  \"undefined\"  } onChange ={handleInputChange}type=\"Date\"></input>\r\n                             </div>\r\n                        </div>\r\n                         <label htmlFor=\"description\">Assign User</label>\r\n                         <input className=\"Task__Input\" name=\"User\" defaultValue={ is_editable ? editableValues.User : \"undefined\" } onChange ={handleInputChange}type=\"text\"></input>\r\n                          \r\n        \r\n            <div className={!is_editable ? \"Task__Button__Alignment\" :\"Task__Button__Alignment__Two\"}>\r\n                 {is_editable ? (<span onClick={handleDelete} className=\"Task__Bin\">\r\n                      <RiDeleteBinLine/>\r\n                 </span>):\"\"}\r\n \r\n                 <div className=\"Task__Handle\">\r\n                            <button id=\"Task__Cancle\" onClick={handleClose}>Cancle</button>\r\n                            <button type=\"reset\" id=\"Task__Save\" onClick={handleSubmit}>Save</button>\r\n                  </div>\r\n            </div>\r\n     </div>\r\n    ) : (\r\n         props.Tasks.map(item => {\r\n             return (\r\n                 <div className=\"Task__List\" key={uuid()}>\r\n                     <div>\r\n                      <Avatar color={Avatar.getRandomColor('sitebase', ['red', 'green', 'blue'])} name=\"User\" size=\"40\" />                         \r\n                     </div>\r\n                     <div className=\"Task__List__TimeZone\">\r\n                     <div id=\"Task__Date__Time\">\r\n                        <p>{item.Description}</p>\r\n                        <p>{item.Date}</p>\r\n                     </div>\r\n\r\n                       \r\n                    <span onClick={(e) => handleEdit(item)} className=\"Task__Edit\">                        \r\n                        <BiEditAlt />\r\n                     </span>\r\n                     </div>\r\n                 </div>                     \r\n             )\r\n         })\r\n    ) \r\n    }\r\n\r\n </div>\r\n        )\r\n\r\n    \r\n}\r\n\r\nconst mapStateToProps = (state) => {\r\n   return {\r\n       Tasks:state.Tasks\r\n   }   \r\n}\r\n\r\nconst mapDispatchToProps =(dispatch) => {\r\n     return {\r\n     AddTask:(inputValues) => dispatch(AddingTask(inputValues)),  \r\n     DeleteTask:(id) => dispatch(DeletingTask(id))  \r\n}\r\n}\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(Task)\r\n","\r\nexport const AddingTask = (values) => {\r\n  return {\r\n    type:\"ADD_TASK\",\r\n    payload:values\r\n}\r\n}\r\n\r\nexport const DeletingTask = (id) => {\r\n  return {\r\n    type:\"DELETE_TASK\",\r\n    payload:id\r\n  }\r\n}","import logo from './logo.svg';\nimport './App.css';\nimport Navbar from \"../src/Components/Navbar/Navbar\"\nimport Task from './Components/Navbar/Tasks/Task';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <Navbar/>\n      <Task/>\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","  \r\nconst initialState = {\r\n    Tasks: [],\r\n  \r\n  };\r\n  \r\n  export const TaskReducer = (state = initialState, action) => {\r\n    switch (action.type) {\r\n       case \"ADD_TASK\":\r\n         return {\r\n          ...state,\r\n          Tasks: [...state.Tasks, action.payload],\r\n         };\r\n       case \"UPDATE_TASK\":\r\n         return state\r\n     \r\n     \r\n      case \"DELETE_TASK\":\r\n        let newState = [...state.Tasks]\r\n        return {\r\n          ...state,\r\n          Tasks: newState.filter(item => item.id === action.payload.id)\r\n        }\r\n      default:\r\n        return state;\r\n    }\r\n  };\r\n  ","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport {createStore,applyMiddleware} from \"redux\"\nimport thunk from \"redux-thunk\"\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\nimport {TaskReducer} from \"./Store/TaskReducer\"\nimport {composeWithDevTools} from \"redux-devtools-extension\"\nimport logger from \"redux-logger\"\nimport { Provider } from \"react-redux\";\n\n\nconst store = createStore(TaskReducer,composeWithDevTools(applyMiddleware(logger,thunk)))\n\nReactDOM.render(\n  <React.StrictMode>\n     <Provider store={store}>\n       <App/>\n    </Provider>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}